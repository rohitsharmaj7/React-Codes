{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","params","useParams","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","addedCommmentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","getSingleQuote","loadedQuote","path","exact","to"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,mBCA7BD,EAAOC,QAAU,CAAC,MAAQ,kC,yIC0CXC,EApCQ,SAACC,GACtB,IAAMC,EAAiBC,mBACvB,EAAmCC,YAAQC,KAApCC,EAAP,EAAOA,YAAYC,EAAnB,EAAmBA,OAAOC,EAA1B,EAA0BA,MACnBC,EAAkBR,EAAlBQ,eAEPC,qBAAU,WACM,cAAXH,GAA2BC,GAE3BC,MAEH,CAACF,EAAOE,EAAeD,IAEzB,IAAMG,EAAoB,SAACC,GACzBA,EAAMC,iBAEN,IAAMC,EAAcZ,EAAea,QAAQC,MAI3CV,EAAY,CAACW,YAAY,CAACC,KAAKJ,GAAaK,QAASlB,EAAMkB,WAG7D,OACE,uBAAMC,UAAWC,IAAQC,KAAMC,SAAUZ,EAAzC,UACc,YAAXJ,GAAwB,qBAAKa,UAAU,WAAf,SAA0B,cAACI,EAAA,EAAD,MACnD,sBAAKJ,UAAWC,IAAQI,QAASF,SAAUZ,EAA3C,UACE,uBAAOe,QAAQ,UAAf,0BACA,0BAAUC,GAAG,UAAUC,KAAK,IAAIC,IAAK3B,OAEvC,qBAAKkB,UAAWC,IAAQS,QAAxB,SACE,wBAAQV,UAAU,MAAlB,+B,iBC3BOW,EARK,SAAC9B,GACnB,OACE,oBAAImB,UAAWC,IAAQW,KAAvB,SACE,4BAAI/B,EAAMiB,U,iBCQDe,EAVM,SAAChC,GACpB,OACE,oBAAImB,UAAWC,IAAQa,SAAvB,SACGjC,EAAMiC,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BlB,KAAMkB,EAAQlB,MAA1BkB,EAAQT,UC2DnBU,EAzDE,WAEf,IAAMC,EAASC,cACf,EAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAmDtC,YAAQuC,KAApDrC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,OAAaqC,EAAjC,EAA4BC,KACrB1B,EAAWmB,EAAXnB,QAEPT,qBAAU,WACRJ,EAAYa,KACZ,CAACA,EAAQb,IAEX,IAQI4B,EAJEY,EAAuBC,uBAAY,WACvCzC,EAAYa,KACZ,CAACb,EAAYa,IA0Bf,MAvBc,YAAXZ,IAED2B,EACE,qBAAKd,UAAU,WAAf,SACE,cAACI,EAAA,EAAD,OAKQ,cAAXjB,IAED2B,EACE,cAAC,EAAD,CAAcA,SAAUU,KAId,cAAXrC,GAA2BqC,GAAkBA,EAAeI,OAAS,IAEtEd,EACE,cAAC,EAAD,CAAcA,SAAUU,KAK1B,0BAASxB,UAAWC,IAAQa,SAA5B,UACE,gDACEO,GACA,wBAAQrB,UAAU,MAAM6B,QApCC,WAC7BP,GAAmB,IAmCf,2BAIDD,GAAmB,cAAC,EAAD,CAAgBtB,QAASA,EAASV,eAAgBqC,IACrEZ,M,iBClDQgB,EATU,SAACjD,GACxB,OACE,yBAAQmB,UAAWC,IAAQ8B,MAA3B,UACE,4BAAIlD,EAAMiB,OACV,qCAAajB,EAAMmD,aCiDVC,UA9CK,WAEhB,IAAMf,EAASC,cACRpB,EAAWmB,EAAXnB,QAEP,EAAwDf,YAAQkD,KAAe,GAAxEhD,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,OAAcgD,EAAlC,EAA4BV,KAAmBrC,EAA/C,EAA+CA,MAM/C,OAJAE,qBAAU,WACLJ,EAAYa,KACf,CAACb,EAAYa,IAED,YAAXZ,EAGK,qBAAKa,UAAU,WAAf,SACI,cAACI,EAAA,EAAD,MAKThB,EAEQ,mBAAGY,UAAU,WAAb,SAAyBZ,IAGhC+C,EAAYrC,KAMb,qCACC,cAAC,EAAD,CAAkBA,KAAMqC,EAAYrC,KAAMkC,OAAQG,EAAYH,SAC9D,cAAC,IAAD,CAAOI,KAAI,kBAAalB,EAAOnB,SAAWsC,OAAK,EAA/C,SACA,qBAAKrC,UAAU,WAAf,SACI,cAAC,IAAD,CAAMA,UAAU,YAAYsC,GAAE,kBAAapB,EAAOnB,QAApB,aAA9B,+BAIJ,cAAC,IAAD,CAAOqC,KAAI,4BAAX,SACI,cAAC,EAAD,SAbG","file":"static/js/4.1d93f072.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__3plJ8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2ErSS\",\"loading\":\"NewCommentForm_loading__2-nea\",\"control\":\"NewCommentForm_control__2g2-l\",\"actions\":\"NewCommentForm_actions__jzX1h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2CTWG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__1JHTH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__1EEhF\"};","import { useEffect, useRef } from 'react';\n\nimport classes from './NewCommentForm.module.css';\nimport useHttp from '../../hooks/use-http';\nimport {addComment} from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const {sendRequest,status,error} = useHttp(addComment)\n  const {onAddedComment} = props;\n\n  useEffect(()=>{\n    if(status === \"completed\" && !error)\n    {\n       onAddedComment();\n    }\n  },[status,onAddedComment,error])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({commentData:{text:enteredText},quoteId: props.quoteId})\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && <div className=\"centered\"><LoadingSpinner/></div>}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n \n  const params = useParams();\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const {sendRequest, status, data:loadedComments} = useHttp(getAllComments)\n  const {quoteId} = params;\n\n  useEffect(()=>{\n    sendRequest(quoteId)\n  },[quoteId,sendRequest])\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommmentHandler = useCallback(() =>{\n    sendRequest(quoteId)\n  },[sendRequest,quoteId]);\n\n  let comments;\n  if(status === 'pending')\n  {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner/>\n      </div>\n    );\n  }\n\n  if(status === 'completed')\n  {\n    comments = (\n      <CommentsList comments={loadedComments}/>\n    )\n  }\n\n  if(status === 'completed' && (loadedComments && loadedComments.length > 0))\n  {\n    comments = (\n      <CommentsList comments={loadedComments}/>\n    )\n  }\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addedCommmentHandler}/>}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from \"react\";\r\nimport { useParams, Route } from \"react-router\";\r\nimport {Link} from 'react-router-dom';\r\nimport Comments from '../components/comments/Comments';\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport useHttp from '../hooks/use-http';\r\nimport {getSingleQuote} from '../lib/api';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\n\r\nconst QuoteDetail = () =>\r\n{\r\n    const params = useParams();\r\n    const {quoteId} = params;\r\n\r\n    const {sendRequest, status, data: loadedQuote, error} = useHttp(getSingleQuote,true)\r\n    \r\n    useEffect(()=>{\r\n         sendRequest(quoteId)\r\n    },[sendRequest,quoteId])\r\n\r\n    if(status === 'pending')\r\n    {\r\n        return (\r\n            <div className='centered'>\r\n                <LoadingSpinner/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if(error)\r\n    {\r\n        return <p className='centered'>{error}</p>;\r\n    }\r\n\r\n    if(!loadedQuote.text)\r\n    {\r\n        return <>No Quote Found!</>\r\n    }\r\n\r\n   return (\r\n       <>\r\n        <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author}/>\r\n        <Route path={`/quotes/${params.quoteId}`} exact>\r\n        <div className=\"centered\">\r\n            <Link className=\"btn--flat\" to={`/quotes/${params.quoteId}/comments`}>Load Comments</Link>\r\n        </div>\r\n        </Route>\r\n\r\n        <Route path={`/quotes/:quoteId/comments`}>\r\n            <Comments/>\r\n        </Route>\r\n       </>\r\n   )\r\n}\r\n\r\nexport default QuoteDetail;"],"sourceRoot":""}